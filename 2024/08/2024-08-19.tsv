title	url	points	by	hnId	dot
Police Cannot Seize Property Indefinitely After an Arrest, Federal Court Rules	https://reason.com/2024/08/16/police-cannot-seize-property-indefinitely-after-an-arrest-federal-court-rules/	465	throwup238	41283310	digraph PoliceSeizure{rankdir=TB;node[shape=box, style="filled", fillcolor="#f0f0f0", fontname="Arial", fontsize=12];edge[fontname="Arial", fontsize=10];CourtDecision[label="Federal Court Ruling\nPolice Cannot Seize Property\nIndefinitely After Arrest", fillcolor="#ffcc00"];Amendment[label="Fourth Amendment\nProtects Against\nUnreasonable Seizures"];LawEnforcement[label="Law Enforcement\nRetention of Property"];ProlongedSeizure[label="Prolonged Seizures are\nUnconstitutional"];ReasonableRetention[label="Retention Must Be\nReasonable"]; Lawsuit[label="Plaintiffs' Lawsuit:\nProperty Seized by MPD\nDuring BLM Protest"];Outcome[label="Potential for National Precedent\nCase May Reach Supreme Court"];Repercussions[label="Loss of Property Rights\nForced to Replace Items"];CourtDecision->Amendment;CourtDecision->LawEnforcement;LawEnforcement->ProlongedSeizure;LawEnforcement->ReasonableRetention;ReasonableRetention->Lawsuit;Lawsuit->Outcome;Lawsuit->Repercussions;}
Dasel: Select, put and delete data from JSON, TOML, YAML, XML and CSV	https://github.com/TomWright/dasel	260	edward	41282495	digraph dasel{rankdir=TB;node[shape=box];subgraph cluster_1{label="Dasel Tool";style=dashed;dasel[label="Dasel: Data Selector", shape=ellipse];json[label="JSON"];toml[label="TOML"];yaml[label="YAML"];xml[label="XML"];csv[label="CSV"]; dasel->json;dasel->toml;dasel->yaml;dasel->xml;dasel->csv;}subgraph cluster_2{label="Features";style=dotted;select[label="Select Data"];put[label="Put Data"];delete[label="Delete Data"];convert[label="Convert Formats"];query[label="Standard Query Syntax"]; dasel->select;dasel->put;dasel->delete;dasel->convert;dasel->query;}subgraph cluster_3{label="Usage";style=dotted;usage1[label="Querying Data"];usage2[label="Updating Data"];usage3[label="Creating Files"]; select->usage1;put->usage2;delete->usage3;}subgraph cluster_4{label="Installation & Usage";style=dotted;install[label="Available on Homebrew, Docker, etc."];go_package[label="Can be used as Go Package"]; dasel->install;dasel->go_package;}}
Leaving Neovim for Zed	https://stevedylan.dev/posts/leaving-neovim-for-zed/	192	mxstbr	41284322	digraph TextEditorJourney{node[shape=box, style=filled, fillcolor=lightblue]; Journey[label="Text Editor Journey", shape=ellipse, fillcolor=lightgreen]; Atom[label="Atom", fillcolor=lightyellow];VSCode[label="VSCode", fillcolor=lightyellow];Vim[label="Vim", fillcolor=lightyellow];Neovim[label="Neovim", fillcolor=lightyellow];Zed[label="Zed", fillcolor=lightyellow]; Speed[label="Speed", fillcolor=lightcoral];EaseOfUse[label="Ease of Use", fillcolor=lightcoral];GitIntegration[label="Git Integration", fillcolor=lightcoral];AIFeatures[label="AI Features", fillcolor=lightcoral];VimMode[label="Vim Mode", fillcolor=lightcoral]; Journey->Atom;Journey->VSCode;Journey->Vim;Journey->Neovim;Journey->Zed;Zed->Speed;Zed->EaseOfUse;Zed->GitIntegration;Zed->AIFeatures;Zed->VimMode;Neovim->Zed[label="Transition due to performance issues", color=red];VSCode->Neovim[label="Short trial, returned to Neovim", color=orange]; FinalThoughts[label="Try new tools for productivity!", shape=ellipse, fillcolor=lightgreen];Zed->FinalThoughts;}
Getting back into C programming for CP/M	https://kevinboone.me/cpm-c.html	155	AlexeyBrin	41281665	digraph CP_M_Development{node[shape=box, style=filled, color=lightblue];subgraph cluster_0{label="CP/M Development Overview";style=filled;color=lightgrey;CP_M[label="CP/M Interest Revival"];Z80[label="Z80-based Machine"];Retrocomputing[label="Retrocomputing Enthusiasts"];Tools[label="CP/M Tools Usage"];ModernTools[label="Modern Tools for Testing"];CP_M->Z80;Z80->Retrocomputing;CP_M->Tools;Tools->ModernTools;}subgraph cluster_1{label="Aztec C Compiler";style=filled;color=lightyellow;AztecC[label="Aztec C"];Assembly[label="Generates Assembly"];Compatibility[label="8080 & Z80 Compatibility"];Limitations[label="Pre-ANSI C Syntax"];AztecC->Assembly;Assembly->Compatibility;AztecC->Limitations;}subgraph cluster_2{label="Development Challenges";style=filled;color=lightgreen;Syntax[label="Function Declaration Syntax"];DataTypes[label="Data Type Sizes"];Libraries[label="Minimal Libraries"];CommandLine[label="Command Line Limitations"];Efficiency[label="Efficiency Considerations"];Syntax->DataTypes;DataTypes->Libraries;Libraries->CommandLine;CommandLine->Efficiency;}subgraph cluster_3{label="Testing and Optimization";style=filled;color=lightcoral;Emulators[label="CP/M Emulators"];Hardware[label="Testing on Real Hardware"];Optimization[label="Code Optimization"];ModernTesting[label="Modern Testing Tools"];Emulators->Hardware;Hardware->Optimization;Optimization->ModernTesting;}}
How the OCaml type checker works (2022)	https://okmij.org/ftp/ML/generalization.html	154	mooreds	41281555	digraph OCamlTypeChecker{node[shape=box, style=filled, color=lightblue];HindleyMilner[label="Hindley-Milner Type Inference"];AlgorithmW[label="Algorithm W"];RemyAlgorithm[label="Rémy's Algorithm"];TypeGeneralization[label="Type Generalization"];DependencyTracking[label="Dependency Tracking"];Regions[label="Regions"];GenerationalGC[label="Generational Garbage Collection"];OCamlTypeChecker[label="OCaml Type Checker"];UniversalsExistentials[label="Universals and Existentials"];MLF[label="MLF"];RegionContainment[label="Region Containment"];TypeSyntaxTree[label="Type-Annotated Abstract Syntax Tree"];Dominators[label="Finding Dominators"];MemoryManagement[label="Memory Management"];HindleyMilner->AlgorithmW;HindleyMilner->RemyAlgorithm;RemyAlgorithm->TypeGeneralization;TypeGeneralization->DependencyTracking;DependencyTracking->Regions;DependencyTracking->GenerationalGC;RemyAlgorithm->OCamlTypeChecker;RemyAlgorithm->UniversalsExistentials;RemyAlgorithm->MLF;Regions->RegionContainment;TypeSyntaxTree->Dominators;MemoryManagement->GenerationalGC;MemoryManagement->Regions;UniversalsExistentials->OCamlTypeChecker;MLF->RemyAlgorithm;RegionContainment->TypeGeneralization;TypeGeneralization->TypeSyntaxTree;}
Algorithms we develop software by	https://grantslatton.com/software-pathfinding	148	xal	41284409	digraph SoftwarePathfinding{rankdir=TB;node[shape=box, style=filled, fillcolor="#E0E0E0"];A[label="Software Development Methodologies" shape=ellipse fillcolor="#FFD700"];B[label="His Method" fillcolor="#ADD8E6"];C[label="Write Everything Twice" fillcolor="#ADD8E6"];D[label="Quantity has a Quality All of Its Own" fillcolor="#ADD8E6"];E[label="Comparison to the Gun to the Head Heuristic" fillcolor="#ADD8E6"];F[label="Pathfinding in Problem Space" fillcolor="#ADD8E6"]; A->B[label="Describes"];A->C[label="Advice"];A->D[label="Philosophy"];A->E[label="Heuristic"];A->F[label="Core Concept"];B1[label="Start working on feature at the beginning of the day."];B2[label="If not finished, delete and start over."];B3[label="Keep unit tests."];B4[label="If stuck, identify groundwork needed."];B5[label="Use method to implement groundwork."]; B->B1;B->B2;B->B3;B->B4;B->B5;C1[label="Write code, stash it, then rewrite."];C2[label="Leads to better quality code."];C3[label="Good trade for maintainable projects."]; C->C1;C->C2;C->C3;D1[label="100K lines of code experience."];D2[label="Repetition helps retain knowledge."];D3[label="5K perfect lines to see major patterns."]; D->D1;D->D2;D->D3;E1[label="Breaks anchoring bias."];E2[label="Encourages radical solutions."];E3[label="New solutions often better than original."]; E->E1;E->E2;E->E3;F1[label="Finding the best solution."];F2[label="Analogies to pathfinding algorithms."];F3[label="Improving engineering skills."]; F->F1;F->F2;F->F3;}
Surveillance Watch – the hidden connections within the surveillance industry	https://www.surveillancewatch.io	136	nabla9	41283149	digraph SurveillanceWatch{rankdir=TB;node[shape=box, style=rounded, fontname="Helvetica"]; A[label="They know who you are." color="lightblue" style="filled"];B[label="It's time to uncover who they are." color="lightcoral" style="filled"];C[label="Surveillance Watch" shape=ellipse, color="lightgoldenrodyellow" style="filled" fontsize=20, fontcolor="black"];D[label="Interactive Map" color="lightgrey" style="filled"];E[label="Surveillance Companies" color="lightgrey" style="filled"];F[label="Funding Sources" color="lightgrey" style="filled"];G[label="Affiliations" color="lightgrey" style="filled"]; C->D[label="revealing" fontcolor="black"];D->E[label="connections" fontcolor="black"];D->F[label="connections" fontcolor="black"];D->G[label="connections" fontcolor="black"];{rank=same;A->B[style=invis]};{rank=same;E->F->G[style=invis]};}
Show HN: PgQueuer – Transform PostgreSQL into a Job Queue	https://github.com/janbjorge/PgQueuer	131	jeeybee	41284703	digraph PGQueuer{node[shape=box, style=rounded, fontname="Helvetica", fontsize=12];subgraph cluster_intro{label="🚀 PGQueuer";style=dashed;color=lightgray;PGQueuer[label="PGQueuer\n(Minimalist, high-performance job queue for Python)", shape=rect, width=2.5];Features[label="Features", shape=rect, width=2.5];Documentation[label="Documentation\nExplore the Docs", shape=rect, width=2.5];SourceCode[label="Source Code\nView on GitHub", shape=rect, width=2.5];Community[label="Community\nJoin the Discussion", shape=rect, width=2.5];}subgraph cluster_features{label="Key Features";style=dotted;color=lightblue;SimpleIntegration[label="💡 Simple Integration", shape=ellipse];ConcurrencyHandling[label="⚛️ Efficient Concurrency Handling", shape=ellipse];RealTimeNotifications[label="🚧 Real-time Notifications", shape=ellipse];BatchProcessing[label="👨‍🎓 Batch Processing", shape=ellipse];GracefulShutdown[label="⏳ Graceful Shutdowns", shape=ellipse];RecurringJobs[label="⌛ Recurring Job Scheduling", shape=ellipse];}subgraph cluster_process{label="Job Processing Workflow";style=dotted;color=lightgreen;Producer[label="Producer\nEnqueue Jobs", shape=rect];Consumer[label="Consumer\nProcess Jobs", shape=rect];Database[label="PostgreSQL\nJob Queue DB", shape=rect];Dashboard[label="Dashboard\nMonitor Jobs in Real-time", shape=rect];}PGQueuer->Features;PGQueuer->Documentation;PGQueuer->SourceCode;PGQueuer->Community;Features->SimpleIntegration;Features->ConcurrencyHandling;Features->RealTimeNotifications;Features->BatchProcessing;Features->GracefulShutdown;Features->RecurringJobs;Producer->Database[label="Enqueues jobs"];Consumer->Database[label="Dequeues jobs"];Producer->Consumer[label="Jobs to Process"];Database->Consumer[label="Job Data"];Dashboard->Database[label="Job Stats"];Dashboard->Producer[label="View Job Stats"];}
Mike Magee, founder of the Register, has died	https://fudzilla.com/news/59503-mike-mageek-is-dead	131	dannyobrien	41285851	digraph MikeMagee{node[shape=box];Magee[label="Mike Magee\n(1949-2023)\nIT Industry Legend"];Career[label="Career"];Publications[label="Publications"];Interests[label="Interests"];Death[label="Death"];Legacy[label="Legacy"]; IndustryGadfly[label="Industry Gadfly"];TantricGuru[label="Tantric Guru"]; TheRegister[label="Co-founded The Register\n(1994)"];TheInquirer[label="Founded The Inquirer\n(2000)"];TechEye[label="Pursued other ventures\n(2008+)"]; Occult[label="Occult Interests"];Azoth[label="Started Azoth\n(1971)"];SOTHiS[label="Started SOTHiS\n(1973)"];AMOOKOS[label="Founded AMOOKOS\n(1977)"]; HeartAttack[label="Heart Attack\n(2000)"];Influential[label="Top 50 Most Influential\nBritons in Tech (2009)"]; PersonalLife[label="Personal Life"];Marriage[label="Married Jan Bailey\n(1978)"];Son[label="Son: Tamlin"]; Magee->Career;Magee->Death;Magee->Legacy;Magee->Interests;Magee->PersonalLife;Career->IndustryGadfly;Career->Publications;Publications->TheRegister;Publications->TheInquirer;Publications->TechEye;Interests->Occult;Interests->TantricGuru;Occult->Azoth;Occult->SOTHiS;Occult->AMOOKOS;Death->HeartAttack;Legacy->Influential; PersonalLife->Marriage;PersonalLife->Son;}
Micro-libraries should never be used	https://bvisness.me/microlibraries/	120	nalgeon	41284335	digraph MicroLibraries{node[shape=box, style=filled, fillcolor=lightblue, fontname="Arial"]; Thesis[label="Micro-libraries should never be used!", shape=ellipse, fillcolor=lightgreen];Benefits[label="Benefits of Libraries", shape=rect];Development_Time[label="Saves development time"];Code_Robustness[label="More robust code"];Easy_Upgrades[label="Easy upgrades with fixes"];Costs[label="Costs of Libraries", shape=rect, fillcolor=lightcoral];Bad_Fit[label="Bad fit for your problem"];Poorly_Written[label="Poorly written code"];Risky[label="Inherent risks with third-party code"];Supply_Chain[label="Supply chain attack vector"];Bloat[label="Large footprint"];Update_Issues[label="Updates cause breaking changes"];Transitive_Dep[label="Transitive dependencies increase complexity"];IsNumber[label="is-number: A case study", shape=box3d];Benefits_Reviews[label="Benefits: Saves time? Robust? Updates useful?"];Risks_Reviews[label="Costs: Good fit? Breaking updates? Bloated? Risky?"];CopyPaste[label="Copy-paste code instead!", shape=rectangle, fillcolor=lightgoldenrodyellow];Fear[label="Fear of causing bugs leads to library use", shape=diamond];Thesis->Benefits;Thesis->Costs;Benefits->Development_Time;Benefits->Code_Robustness;Benefits->Easy_Upgrades;Costs->Bad_Fit;Costs->Poorly_Written;Costs->Risky;Costs->Supply_Chain;Costs->Bloat;Costs->Update_Issues;Costs->Transitive_Dep;IsNumber->Benefits_Reviews;IsNumber->Risks_Reviews;Thesis->CopyPaste;Fear->Thesis;}
